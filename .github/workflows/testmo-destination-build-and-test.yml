name: ðŸ’  Build Main App (âž•Unit Tests) ðŸ“¤ testmo ðŸ’ 

on:
  push:
    branches: [ "main", "master", "Development" ]
  pull_request:
    branches: [ "main", "master", "Development"]

jobs:
  build:
    name: Build, test and publish UNIT TEST results to Testmo
    runs-on: ubuntu-latest

    steps:
    - name: Branch Check
      id: branch_check
      run: |
          #use SHA for now, also careful the sha may not be expected, see: https://stackoverflow.com/a/68068674
          echo "release_version=${{ github.sha }}" >> $GITHUB_OUTPUT
          
          ref="${{ github.ref }}"
          # if [ "$ref" = "refs/heads/master" ] || [ "$ref" = "refs/heads/main" ]; then
          #     echo "env_name=Production" >> $GITHUB_OUTPUT
          # else
          #     echo "env_name=Development" >> $GITHUB_OUTPUT
          # fi   
          case "$ref" in
            "refs/heads/master" | "refs/heads/main")
              echo "env_name=Production" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/develop")
              echo "env_name=Development" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "env_name=Other" >> $GITHUB_OUTPUT
              ;;
          esac
    - name: Environment Selected
      run: echo "Environment will be ${{ steps.branch_check.outputs.env_name }}"
    - uses: actions/checkout@v4

    - name: Setup dotnet8.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore & Build & NPM Testmo Install
      run: |
       dotnet restore
       dotnet build --no-restore

       npm ci 
       npm install --no-save @testmo/testmo-cli

    - name: Create testmo run
      id: testmo_run_create
      run: |
        run_name=$(TZ=':Australia/Melbourne' date '+%Y%m%d-%H:%M-Unit-and-Selenium-Tests')

        ID=$(npx testmo automation:run:create \
          --instance "$TESTMO_URL" \
          --project-id 1 \
          --name "$run_name" \
          --source Unit-and-Selenium)
        echo "testmo_run_id=$ID" >> $GITHUB_OUTPUT

      env:
        TESTMO_URL: ${{ vars.TESTMO_URL }}
        TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
        
    - name: ðŸ’  Test and Reporting ðŸ“¤ testmo Publish 
      run: |

        ## npx is `Run a command from a local or remote npm package`
        ## call into the testmo node executable, submit a run and the last line is the call to dotnet test (NOTE the space after -- and before `dotnet test`)

        npx testmo automation:run:submit-thread \
          --instance "$TESTMO_URL" \
          --run-id "$RUN_ID" \
          --results ./ApiBackend/testmo-unit-test-output.xml \
          -- dotnet test --no-build --verbosity normal --logger:"junit;LogFilePath=testmo-unit-test-output.xml" --environment TEST_ENV="${{ steps.branch_check.outputs.env_name }}" --environment TEST_VER="${{ steps.branch_check.outputs.release_version }}"

      env:
        RUN_ID: ${{ steps.testmo_run_create.outputs.testmo_run_id}}
        TESTMO_URL: ${{ vars.TESTMO_URL }}
        TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

    - name: ðŸ’  [CrossRepo] Run Selenium Tests with ðŸ“¤ testmo Publish 
      uses: saragamage/trigger-workflow-and-wait@master
      with:
        owner: ${{ vars.CROSS_REPO_OWNER }}
        repo: ${{ vars.CROSS_REPO_REPO_NAME }}
        github_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN_PERM_SEL_TEST_PROJ }}
        workflow_file_name: ${{ vars.CROSS_REPO_TESTMO_WORKFOW_ACTION }}
        ref: main
        wait_interval: 15
        client_payload: '{"testmo_run_id": "${{ env.C_RUN_ID }}", "env_name": "${{ env.C_ENV }}", "release_version": "${{ env.C_VER }}" }'
        propagate_failure: false
        trigger_workflow: true
        wait_workflow: true
      env:
        C_RUN_ID: ${{ steps.testmo_run_create.outputs.testmo_run_id }}
        C_ENV: ${{ steps.branch_check.outputs.env_name }}
        C_VER: ${{ steps.branch_check.outputs.release_version }}

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      testmo_run_id: ${{ steps.testmo_run_create.outputs.testmo_run_id }}
